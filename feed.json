{
    "version": "https://jsonfeed.org/version/1",
    "title": "Home",
    "description": "",
    "home_page_url": "https://jake-najera.github.io/jn-portfolio.github.io",
    "feed_url": "https://jake-najera.github.io/jn-portfolio.github.io/feed.json",
    "user_comment": "",
    "author": {
        "name": "Jake Najera"
    },
    "items": [
        {
            "id": "https://jake-najera.github.io/jn-portfolio.github.io/multi-threaded-k-means-3.html",
            "url": "https://jake-najera.github.io/jn-portfolio.github.io/multi-threaded-k-means-3.html",
            "title": "Multi-threaded Algorithms",
            "summary": "<p>For my parallel programming class's final project, I opted to take a well-known algorithm, K-Means Clustering, multi-thread it two different ways and compare the runtime performance between all three algorithms.</p>\n",
            "content_html": "<p>For my parallel programming class's final project, I opted to take a well-known algorithm, K-Means Clustering, multi-thread it two different ways and compare the runtime performance between all three algorithms.</p>\n\n<p> The standard K-Means algorithm consists of three steps:</p>\n<ol>\n<li>Assignment, assigning each sample to the nearest centroid by using Euclidean distance.</li>\n<li>Update, recalculating the centroids and updating their positions.</li>\n<li>Loop steps one and two if completion condition is not met.</li>\n<li>Completion, determined by either achieving convergence or completing a fixed number of iterations.</li>\n</ol>\n<figure class=\"post__image post__image--center\" ><img loading=\"lazy\" style=\"font-size: 18.4px; outline: 3px solid rgba(var(--primary-color-rgb), 0.55)  !important;\" src=\"https://jake-najera.github.io/jn-portfolio.github.io/media/posts/13/Visualizer-2.gif\" alt=\"\" width=\"277\" height=\"352\">\n<figcaption >K-Means Completion, <a href=\"https://jake-najera.github.io/jn-portfolio.github.io/k-means-visualizer.html\">Source</a></figcaption>\n</figure>\n<p>Let's begin by first talking about the applications of multi-threading used:</p>\n<ul>\n<li>We are looking to improve the <strong>execution time </strong>of the algorithm.</li>\n<li>Multi-threading will <strong>not improve time complexity</strong>, the Big O notation of an algorithm will stay the same, as we are only applying factors onto Big O. An example would be that we have an O(n) algorithm. In theory, by using three threads in perfect parallel, it would be O(n/3), but since it is only a factor the notation would remain O(n) overall.</li>\n<li><strong>Thread pools</strong> is key to saving time. Thread creation is time-expensive, as we'll see further below.</li>\n<li><strong>Mutexes </strong>will be used to achieve <strong>mutual exclusion</strong> of container access, to avoid having multiple threads access a container at once and result in unstable race condition-based behavior.</li>\n<li><strong>Semphores </strong>will be used in the form of a traffic light mechanism. Imagine that there is a one-way road with \"T\" number of lanes and a stoplight. The traffic light will stay red until all lanes are \"filled\", only then will it turn green. Returning back to threading, <strong>semaphores </strong>act as a synchronization tool that makes sure of all threads completing a task before moving on to another.</li>\n<li><strong>Slicing</strong> or worker delegation is similar to how in Python one is able to slice arrays or a cake, we will cut the algorithm's workload into smaller chunks. The C++ benefit is that threads \"own\" their workload, achieving a true parallel workflow. A concept similar to <strong>mutexes</strong> in terms of <strong>mutual exclusion</strong>.</li>\n</ul>\n<h3>Approach #1: MT Centroid Update</h3>\n<p>The first multi-threading approach speeds up execution time by executing the update step in parallel but with several pitfalls.</p>\n<ol>\n<li>Assignment.</li>\n<li>Update, done in parallel by slicing the centroid container by T, the number of threads.</li>\n<li>Barrier, wait until all threads are finished updating.</li>\n<li>Loop steps one to three if completion condition is not met.</li>\n<li>Completion, completed a fixed number of iterations.<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://jake-najera.github.io/jn-portfolio.github.io/media/posts/13/MTCU.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://jake-najera.github.io/jn-portfolio.github.io/media/posts/13/responsive/MTCU-xs.png 300w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/13/responsive/MTCU-sm.png 480w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/13/responsive/MTCU-md.png 768w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/13/responsive/MTCU-lg.png 1024w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/13/responsive/MTCU-xl.png 1360w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/13/responsive/MTCU-2xl.png 1600w\"  alt=\"\" width=\"501\" height=\"367\"></figure></li>\n</ol>\n<p>This approach suffers from the assignment step being single threaded and that threads are being created every iteration.</p>\n<h3>Approach #2: MT Workers Parallelization</h3>\n<p>The second and final multi-threading approach speeds up execution time by executing the assignment and update steps in parallel using slicing and barriers.</p>\n<ol>\n<li>Intialize thread pool.</li>\n<li>Assignment, done in parallel by slicing the sample container by T, the number of threads.</li>\n<li>Barrier, wait until all threads are finished assigning.</li>\n<li>Update, done in parallel by slicing the centroid container by T, the number of threads.</li>\n<li>Barrier, wait until all threads are finished updating.</li>\n<li>Repeat steps two to five if completion condition is not met.</li>\n<li>Completion, completed a fixed number of iterations.</li>\n</ol>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://jake-najera.github.io/jn-portfolio.github.io/media/posts/13/MTWP-2.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://jake-najera.github.io/jn-portfolio.github.io/media/posts/13/responsive/MTWP-2-xs.png 300w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/13/responsive/MTWP-2-sm.png 480w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/13/responsive/MTWP-2-md.png 768w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/13/responsive/MTWP-2-lg.png 1024w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/13/responsive/MTWP-2-xl.png 1360w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/13/responsive/MTWP-2-2xl.png 1600w\"  alt=\"\" width=\"470\" height=\"358\"></figure>\n<h3>Results:</h3>\n<p>After completing both approaches, I ran tests on all three algorithm versions, with varying number of clusters and samples and performed an algorithm analysis using Bash for execution timing and Tableau for visualization, here's a snippet:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://jake-najera.github.io/jn-portfolio.github.io/media/posts/13/Cluster-Comparison.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://jake-najera.github.io/jn-portfolio.github.io/media/posts/13/responsive/Cluster-Comparison-xs.png 300w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/13/responsive/Cluster-Comparison-sm.png 480w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/13/responsive/Cluster-Comparison-md.png 768w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/13/responsive/Cluster-Comparison-lg.png 1024w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/13/responsive/Cluster-Comparison-xl.png 1360w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/13/responsive/Cluster-Comparison-2xl.png 1600w\"  alt=\"\" width=\"1585\" height=\"925\"></figure>\n<p>The full analysis document can be found <a href=\"https://github.com/jake-najera/MultithreadedKMeans/blob/main/Analytical%20Findings/Analysis.pdf\" title=\"https://github.com/jake-najera/MultithreadedKMeans/blob/main/Analytical%20Findings/Analysis.pdf\">here</a>, the Tableau dashboards <a href=\"https://public.tableau.com/views/Multi-ThreadedK-MeansProject/ClusterComparison?:language=en&amp;:display_count=y&amp;:toolbar=n&amp;:origin=viz_share_link\">here</a>, and the codebase <a href=\"https://github.com/jake-najera/MultithreadedKMeans\">here</a>. As a whole, I really enjoyed the challenges that this project prompted, and feel very satisified with my findings.</p>",
            "author": {
                "name": "Jake Najera"
            },
            "tags": [
                   "Tableau",
                   "C++"
            ],
            "date_published": "2021-04-01T12:38:23-05:00",
            "date_modified": "2021-04-01T18:04:38-05:00"
        },
        {
            "id": "https://jake-najera.github.io/jn-portfolio.github.io/twitchscraper-2.html",
            "url": "https://jake-najera.github.io/jn-portfolio.github.io/twitchscraper-2.html",
            "title": "TwitchScraper",
            "summary": "<p>TwitchScraper is an automated web-scraping tool for Twitch that I created to practice Python's data manipulation functionality and to practice creating dashboards in Tableau.</p>\n",
            "content_html": "<p>TwitchScraper is an automated web-scraping tool for Twitch that I created to practice Python's data manipulation functionality and to practice creating dashboards in Tableau.</p>\n\n<p>The pipeline can be broken down into three steps: <strong>instancing</strong>, <strong>scraping</strong>, and <strong>wrangling</strong>. At the end of the pipeline, the result is a CSV that displays the top 10 games in viewership on Twitch, at the time that the tool began.</p>\n<h3>Step One: Instancing</h3>\n<p>The pipeline begins with the usage of Selenium, a Python module used to automate browsers. With Selenium, we are able to launch a test instance of Google Chrome and programmatically interact with the browser. The reason for using Selenium is because Twitch uses dynamic JavaScript, if we were to skip straight to using BeautifulSoup, it would scrape nothing. Selenium acts as a workaround by creating a browser instance and visiting the Twitch page as if it were a normal user. <span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">TwitchScraper uses Selenium to boot a Chrome instance and load Twitch, like so:</span></p>\n<figure class=\"post__image post__image--center\" ><img loading=\"lazy\" src=\"https://jake-najera.github.io/jn-portfolio.github.io/media/posts/12/TS1.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://jake-najera.github.io/jn-portfolio.github.io/media/posts/12/responsive/TS1-xs.png 300w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/12/responsive/TS1-sm.png 480w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/12/responsive/TS1-md.png 768w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/12/responsive/TS1-lg.png 1024w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/12/responsive/TS1-xl.png 1360w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/12/responsive/TS1-2xl.png 1600w\"  alt=\"\" width=\"755\" height=\"353\">\n<figcaption >Source: <a href=\"https://github.com/jake-najera/TwitchScraper/blob/main/WebInterface.py\" title=\"https://github.com/jake-najera/TwitchScraper/blob/main/WebInterface.py\">https://github.com/jake-najera/TwitchScraper/blob/main/WebInterface.py</a></figcaption>\n</figure>\n<h3>Step Two: Scraping</h3>\n<p>Once the page is loaded, TwitchScraper uses BeautifulSoup to scrape the viewercounts of the top 10 most viewed games on Twitch. I had been exposed to BeautifulSoup prior to beginning the project, and that short exposure lead to this project!</p>\n<h3>Step Three: Wrangling</h3>\n<p>Upon the completion of scraping, TwitchScraper uses Pandas to create a dataframe after constructing rows consisting of viewer count, game name, and datetime, like so:</p>\n<figure class=\"post__image post__image--center\" ><img loading=\"lazy\" src=\"https://jake-najera.github.io/jn-portfolio.github.io/media/posts/12/TS3.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://jake-najera.github.io/jn-portfolio.github.io/media/posts/12/responsive/TS3-xs.png 300w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/12/responsive/TS3-sm.png 480w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/12/responsive/TS3-md.png 768w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/12/responsive/TS3-lg.png 1024w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/12/responsive/TS3-xl.png 1360w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/12/responsive/TS3-2xl.png 1600w\"  alt=\"https://github.com/jake-najera/TwitchScraper/blob/main/Main.py\" width=\"628\" height=\"567\">\n<figcaption >Source: <a href=\"https://github.com/jake-najera/TwitchScraper/blob/main/Main.py\" title=\"https://github.com/jake-najera/TwitchScraper/blob/main/Main.py\">https://github.com/jake-najera/TwitchScraper/blob/main/Main.py</a></figcaption>\n</figure>\n<p>After converting the rows into a formal Pandas dataframe, the dataframe is outputted onto a CSV and the pipeline is complete, find the source <a href=\"https://github.com/jake-najera/TwitchScraper\">here</a>.</p>\n<h3>Visualization</h3>\n<p>Here is an example visualization that I created after running the pipeline at six hour intervals for a week showing the total number of viewers whenever a game was top 10:</p>\n<figure class=\"post__image\" ><img loading=\"lazy\" src=\"https://jake-najera.github.io/jn-portfolio.github.io/media/posts/12/Summary.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://jake-najera.github.io/jn-portfolio.github.io/media/posts/12/responsive/Summary-xs.png 300w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/12/responsive/Summary-sm.png 480w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/12/responsive/Summary-md.png 768w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/12/responsive/Summary-lg.png 1024w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/12/responsive/Summary-xl.png 1360w ,https://jake-najera.github.io/jn-portfolio.github.io/media/posts/12/responsive/Summary-2xl.png 1600w\"  alt=\"\" width=\"1213\" height=\"859\">\n<figcaption ><a href=\"https://public.tableau.com/views/Book1_15824197969510/Summary?:language=en&amp;:display_count=y&amp;:origin=viz_share_link\" title=\"https://public.tableau.com/views/Book1_15824197969510/Summary?:language=en&amp;:display_count=y&amp;:origin=viz_share_link\">Online Interactive Version</a></figcaption>\n</figure>",
            "author": {
                "name": "Jake Najera"
            },
            "tags": [
                   "Tableau",
                   "Python"
            ],
            "date_published": "2021-04-01T12:38:20-05:00",
            "date_modified": "2021-04-01T17:31:37-05:00"
        },
        {
            "id": "https://jake-najera.github.io/jn-portfolio.github.io/k-means-visualizer.html",
            "url": "https://jake-najera.github.io/jn-portfolio.github.io/k-means-visualizer.html",
            "title": "K-Means Visualizer",
            "summary": "<p>An interactive application to demonstrate K-Means using Python for teaching.</p>\n",
            "content_html": "<p>An interactive application to demonstrate K-Means using Python for teaching.</p>\n\n<p>After <a href=\"https://jake-najera.github.io/jn-portfolio.github.io/multi-threaded-k-means-3.html\">multi-threading K-Means</a>, I decided to create an interactive version of K-Means to practice Python and learn tkinter, a GUI python module. To create the GUI, I began by  being able to plot one point, a centroid, to others through matplotlib:</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://cdn.discordapp.com/attachments/510027274448535552/827297081110560788/unknown.png\" data-is-external-image=\"true\"  width=\"340\" height=\"306\"></figure>\n<p>Doing the same with multiple centroids:</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://cdn.discordapp.com/attachments/510027274448535552/827297186974400512/unknown.png\" data-is-external-image=\"true\"  width=\"335\" height=\"320\"></figure>\n<p>After that result, I cleaned up the presentation of the plot: signifying centroids, Tableau color scheming, and indicative assignment:</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://cdn.discordapp.com/attachments/510027274448535552/827297231655927868/unknown.png\" data-is-external-image=\"true\"  width=\"334\" height=\"319\"></figure>\n<p>Now that the backend is complete, we can focus on the user-facing features, the GUI. I started by creating two text fields. The first to generate points given three arguments in this form: \"start, end, number of points\":</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://jake-najera.github.io/jn-portfolio.github.io/media/posts/9/points.gif\" alt=\"\" width=\"286\" height=\"300\"></figure>\n<p>The second adds centroids to the plot, specified in this format: \"[x,y]\", and a comma separating the lists. It also can take a single argument, to generate random centroids in the range specified previously:</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://jake-najera.github.io/jn-portfolio.github.io/media/posts/9/centroids.gif\" alt=\"\" width=\"286\" height=\"320\"></figure>\n<p>After adding in the final features, this is the final result:</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://jake-najera.github.io/jn-portfolio.github.io/media/posts/9/Visualizer-2.gif\" alt=\"\" width=\"378\" height=\"480\"></figure>\n<p>I found the idea of mixing software engineering with UI design interesting, and I enjoyed learning new ways of user interaction through tkinter and Python. View the source code <a href=\"https://github.com/jake-najera/K-Means-Visualizer\">here</a>!</p>",
            "author": {
                "name": "Jake Najera"
            },
            "tags": [
                   "Python"
            ],
            "date_published": "2021-04-01T12:13:09-05:00",
            "date_modified": "2021-04-01T18:04:44-05:00"
        },
        {
            "id": "https://jake-najera.github.io/jn-portfolio.github.io/sublimination.html",
            "url": "https://jake-najera.github.io/jn-portfolio.github.io/sublimination.html",
            "title": "Sublimination",
            "summary": "<figure>Sublimination is a f<span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit;\"><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit;\"><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit;\">ast-paced networked 1v1 first person arena shooter with fluid and fast movement with a variety of weapons on a custom C++ engine.</span></span></span></figure>\n<figure>",
            "content_html": "<figure>Sublimination is a f<span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit;\"><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit;\"><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit;\">ast-paced networked 1v1 first person arena shooter with fluid and fast movement with a variety of weapons on a custom C++ engine.</span></span></span></figure>\n<figure></figure>\n<figure><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit;\">The team consisted of six programmers and one designer. I acted primarily as a gameplay programmer and level designer. </span><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit;\">As a gameplay programmer, my main focus was on polishing gunplay and movement feel through quality assurance. As a level designer, I used Valve's Hammer Editor to assist in creating our main map, as well as using Python to create a heatmap of player deaths to find areas of conflict, and decide whether changes should be made.</span></figure>\n<figure class=\"post__video\"><iframe loading=\"lazy\" width=\"560\" height=\"314\" src=\"https://www.youtube.com/embed/FG6pMEA6Bao\" allowfullscreen=\"allowfullscreen\" data-mce-fragment=\"1\"></iframe>a</figure>",
            "author": {
                "name": "Jake Najera"
            },
            "tags": [
                   "Python",
                   "C++"
            ],
            "date_published": "2021-03-31T18:41:13-05:00",
            "date_modified": "2021-04-01T12:22:45-05:00"
        },
        {
            "id": "https://jake-najera.github.io/jn-portfolio.github.io/year-of-dragon-2.html",
            "url": "https://jake-najera.github.io/jn-portfolio.github.io/year-of-dragon-2.html",
            "title": "Year of Dargen",
            "summary": "<p>Year of Dargen is a side-scrolling 2D shoot-em-up featuring a dragon and his rider on a quest to stop the twin-headed Hydra from destroying the land.</p>\n",
            "content_html": "<p>Year of Dargen is a side-scrolling 2D shoot-em-up featuring a dragon and his rider on a quest to stop the twin-headed Hydra from destroying the land.</p>\n\n<p>The team consisted of four programmers, four artists, and two designers. As a gameplay programmer, I worked closely with the design team and implemented a pseudo-random upgrade system that allowed for game replayability and JSON serialization to help the design team quickly prototype level concepts and enemy spawning rates. I implemented enemy behavior through flocking, to give the player a challenge with enemies grouping and approaching the player.</p>\n<div class=\"post__iframe\"><iframe loading=\"lazy\" width=\"640\" height=\"480\" src=\"https://drive.google.com/file/d/1ThY6wTPqSgknxYF9HIYGFhkNgvKizrc9/preview\"></iframe></div>",
            "author": {
                "name": "Jake Najera"
            },
            "tags": [
                   "JSON",
                   "C++"
            ],
            "date_published": "2021-03-31T18:40:37-05:00",
            "date_modified": "2021-04-01T16:33:05-05:00"
        }
    ]
}
